@using Microsoft.AspNetCore.Components.Authorization
@using BookwormsUI.Extensions
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@if (UserRole != "" && IsAuthorised == false)
{
    NavigationManager.NavigateTo("/");
}

@code {
    [Parameter]
    public string RolesAllowed { get; set; }
    private string UserRole = "";
    private bool IsAuthorised = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetClaimsPrincipalData();
            StateHasChanged();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserRole = user.GetRoleFromPrincipal();
            CheckIsAuthorised();
        }
        else
        {
            UserRole = "Unauthenticated";
            IsAuthorised = false;
        }
    }

    private void CheckIsAuthorised() 
    {
        var rolesList = RolesAllowed.Split(",");
        
        if (rolesList.Length >= 1)
        {
            int roleExists = 0;

            foreach (string role in rolesList)
            {
                if (role.Trim() == UserRole)
                {
                    roleExists++;
                }
            }

            if (roleExists > 0) 
            {
                IsAuthorised = true;
            }
        }
    }
}

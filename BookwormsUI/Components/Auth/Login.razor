@page "/login"

@inject IAuthenticationService authenticationService
@inject NavigationManager navigationManager

<div class="container">
    <div class="p-3 row justify-content-center">
        <div class="p-4 text-center shadow card col-md-6 col-lg-6">
            <div class="px-5 card-body">
                <i class="mb-4 fas fa-book-reader fa-3x"></i>
                <div class="mb-4 title-text">Bookworms Lending Library</div>
                <div class="mb-4 link-text">
                    <a href="/register">Don't have an account yet? Click here to register</a>
                </div>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-4 form-group">
                        <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" Placeholder="Email Address" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>
                    <div class="mb-4 form-group">
                        <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" Placeholder="Password" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>
                    <div class="mb-4">
                        <button type="submit" class="btn btn-secondary btn-block">Login</button>
                    </div>
                </EditForm>
                <div class="mb-4 link-text">
                    <a href="#">Forgotten your password?</a>
                </div>
                @if (ShowErrors)
                {
                    <div class="mt-4 alert alert-danger w-100" role="alert">
                        @Error
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await authenticationService.Login(loginModel);

        if (result.Successful)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }
}
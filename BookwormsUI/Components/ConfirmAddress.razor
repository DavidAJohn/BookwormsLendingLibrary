@inject RequestService RequestService

<div class="address-modal-title">
    Please Confirm Your Address
</div>

<div class="address-form">
    <EditForm Model="Address" OnValidSubmit="SaveAddress">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="first-name">First Name</label>
            <InputText Id="first-name" Class="form-control" @bind-Value="Address.FirstName" />
            <ValidationMessage For="@(() => Address.FirstName)" />
        </div>

        <div class="form-group">
            <label for="last-name">Last Name</label>
            <InputText Id="last-name" Class="form-control" @bind-Value="Address.LastName" />
            <ValidationMessage For="@(() => Address.LastName)" />
        </div>

        <div class="form-group">
            <label for="street">Street</label>
            <InputText Id="street" Class="form-control" @bind-Value="Address.Street" />
            <ValidationMessage For="@(() => Address.Street)" />
        </div>

        <div class="form-group">
            <label for="city">City</label>
            <InputText Id="city" Class="form-control" @bind-Value="Address.City" />
            <ValidationMessage For="@(() => Address.City)" />
        </div>

        <div class="form-group">
            <label for="county">County</label>
            <InputText Id="county" Class="form-control" @bind-Value="Address.County" />
            <ValidationMessage For="@(() => Address.County)" />
        </div>

        <div class="form-group">
            <label for="post-code">Post Code</label>
            <InputText Id="post-code" Class="form-control" @bind-Value="Address.PostCode" />
            <ValidationMessage For="@(() => Address.PostCode)" />
        </div>
        <div class="form-group address-modal-buttons">
            <button type="submit" class="btn btn-primary">Submit</button>
            <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        </div>
    </EditForm>
</div>

@code {

    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] 
    public int BookId { get; set; }

    private Address Address;

    protected override async Task OnInitializedAsync()
    {
        // set a default empty address initially
        Address = new Address{};

        // check if the user has an existing address saved
        var address = await RequestService.GetBorrowerAddress();

        if (address != null)
        {
            // display the user's existing address if they have one saved
            Address = address;
        }
    }

    public async Task SaveAddress()
    {
        // save the address on the form
        var savedAddress = await RequestService.SaveBorrowerAddress(Address);

        if (savedAddress != null)
        {
            // create new book request
            await CreateBookRequest(savedAddress);
        }
        else 
        {
            // address could not be saved
            await ModalInstance.CloseAsync(ModalResult.Ok($"Your address could not be saved"));
        }
    }

    public async Task CreateBookRequest(Address savedAddress)
    {
        var request = await RequestService.CreateBookRequest(BookId, savedAddress);

        if (request != null)
        {
            if (request.Successful)
            {
                await ModalInstance.CloseAsync(ModalResult.Ok($"Your request has been created"));
            }
            else 
            {
                await ModalInstance.CloseAsync(ModalResult.Ok("Error: " + request.Error));
            }
        }
        else 
        {
            await ModalInstance.CloseAsync(ModalResult.Ok($"Error: Your request could not be created"));
        }
    }

    void Cancel()
    {
        ModalInstance.CancelAsync();
    }
}

@page "/account/"

@using BookwormsUI.Components.Auth
@using BookwormsUI.Extensions
@inject IRequestService requestService

<AuthGuard RolesAllowed="Borrower, Administrator" />

<h3>Your Account</h3>

<div class="py-4">
    <h5>Your book requests</h5>
</div>

    @if (requests == null)
    {
        <div>
            <h5>No requests found</h5>
        </div>
    }
    else
    {
        <div>
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Status</th>
                        <th>Date Requested</th>
                        <th>Date Sent</th>
                        <th>Date Due</th>
                        <th>Date Returned</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in requests)
                    {
                    <tr>
                        <td>@request.BookTitle</td>
                        <td>@request.BookAuthor</td>
                        <td>@request.Status</td>
                        <td>@request.DateRequested.ToUKStandardDate()</td>
                        <td>
                            @(request.DateSent == null 
                            ? ""
                            : GetFormattedDate(request.DateSent)
                            )
                        </td>
                        <td>
                            @(request.DateDue == null
                            ? ""
                            : GetFormattedDate(request.DateDue)
                            )
                        </td>
                        <td>
                            @(request.DateReturned == null
                            ? ""
                            : GetFormattedDate(request.DateReturned)
                            )
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }

@code {
    private List<Request> requests;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetRequestsForUser();
            StateHasChanged();
        }
    }

    private async Task GetRequestsForUser()
    {
        requests = await requestService.GetRequestsForUserAsync();
    }

    private string GetFormattedDate(DateTime? dateTime)
    {
        return String.Format("{0:dd/MM/yyyy}", dateTime);
    }
}

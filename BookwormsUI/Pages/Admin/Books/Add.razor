@page "/admin/books/add"

@using BookwormsUI.Components.Auth
@inject IBookRepository bookRepository
@inject BookService bookService
@inject IAuthorRepository authorRepository
@inject AuthorService authorService
@inject ICategoryRepository categoryRepository
@inject CategoryService categoryService
@inject NavigationManager navigationManager
@inject IToastService toastService

<AuthGuard RolesAllowed="Administrator" />

<div>
    <BreadcrumbHeader BreadcrumbElements=@breadcrumbElements />
</div>

<div class="container">
    <div class="p-3 row justify-content-center">
        <div class="p-4 text-center card col-md-6 col-lg-6">
            <div class="px-5 card-body">
                <div class="mb-4 title-text d-block">
                    <i class="mb-4 fas fa-book-open"></i>&nbsp; Add a Book
                </div>
                <EditForm Model="book" OnValidSubmit="CreateBook">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="title">Title</label>
                        <InputText Id="title" Class="form-control" @bind-Value="book.Title" />
                        <ValidationMessage For="@(() => book.Title)" />
                    </div>

                    <div class="form-group">
                        <label for="year-published">Year Published</label>
                        <InputNumber Id="year-published" Class="form-control" @bind-Value="book.YearPublished" />
                        <ValidationMessage For="@(() => book.YearPublished)" />
                    </div>

                    <div class="form-group">
                        <label for="summary">Summary</label>
                        <InputTextArea Id="summary" Class="form-control" @bind-Value="book.Summary" Rows="4" />
                        <ValidationMessage For="@(() => book.Summary)" />
                    </div>

                    <div class="form-group">
                        <label for="isbn">ISBN</label>
                        <InputText Id="isbn" Class="form-control" @bind-Value="book.ISBN" />
                        <ValidationMessage For="@(() => book.ISBN)" />
                    </div>

                    <div class="form-group">
                        <label for="author">Author</label>
                        <InputSelect @bind-Value="book.AuthorId" class="form-control" id="author">
                            <option value="">-- Select Author --</option>
                            @if (authors != null)
                            {
                                foreach (var author in authors)
                                {
                                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => book.AuthorId)" />
                    </div>

                    <div class="form-group">
                        <label for="category">Category</label>
                        <InputSelect @bind-Value="book.CategoryId" class="form-control" id="category">
                            <option value="">-- Select Category --</option>
                            @if (categories != null)
                            {
                                foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => book.CategoryId)" />
                    </div>

                    <div class="form-group">
                        <label for="imageUrl">Cover Image</label>
                        <FileUpload 
                            ButtonText="Choose cover image"
                            UploadContainer="books"
                            MaxImageWidth=250
                            MaxImageHeight=400
                            @bind-FileValue="book.CoverImageUrl"
                            @bind-FileValue:event="FileValueChanged"
                        />
                        <ValidationMessage For="@(() => book.CoverImageUrl)" />
                    </div>

                    <div class="form-group my-5">
                        <button type="submit" class="btn btn-secondary btn-block">Submit</button>
                    </div>
                </EditForm>
                @if (showErrors)
                {
                    <div class="mt-4 alert alert-danger w-100" role="alert">
                        @error
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Book book = new Book();
    private List<string> breadcrumbElements = new List<string>();
    private List<Author> authors;
    private List<Category> categories;
    private bool showErrors;
    private string error = "";
    public string FileValue = "";

    protected override void OnInitialized()
    {
        book.YearPublished = DateTime.Now.Year;

        // provide the BreadcrumbHeader component with specific elements to display
        string[] elements = {"Admin", "Add Book"};
        breadcrumbElements.AddRange(elements);
    }

    protected async override Task OnInitializedAsync()
    {
        await PopulateAuthorsList();
        await PopulateCategoriesList();
    }

    private async Task PopulateAuthorsList() 
    {
        ItemParameters authorParams = new ItemParameters{
            PageSize = 50
        };

        var apiUri = authorService.GetAuthorsApiEndpoint();
        var response = await authorRepository.GetAsync(apiUri, authorParams);

        authors = response.Items;
    }

    private async Task PopulateCategoriesList() 
    {
        var apiUri = categoryService.GetCategoriesApiEndpoint();
        categories = await categoryRepository.GetListAsync(apiUri);
    }

    private async Task CreateBook()
    {
        var apiUri = bookService.GetBooksApiEndpoint();
        var isSuccess = await bookRepository.CreateAsync(apiUri, book);

        if (isSuccess)
        {
            showErrors = false;
            toastService.ShowSuccess("The book was added successfully", "Book Added");
            BackToAdminIndex();
        } 
        else 
        {
            showErrors = true;
            error = "Sorry, there was a problem adding this book";
        }
    }

    private void BackToAdminIndex()
    {
        navigationManager.NavigateTo("/admin/");
    }
}

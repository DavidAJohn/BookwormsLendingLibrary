@page "/admin/"

@using BookwormsUI.Components.Auth
@using BookwormsUI.Extensions
@inject RequestService requestService
@inject IToastService toastService

<AuthGuard RolesAllowed="Administrator" />

<h3>Bookworms Admin</h3>

<div class="py-4">
    <h5>Pending book requests</h5>
</div>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

@if (pendingRequests == null)
    {
        <div>
            <h5>No pending requests found</h5>
        </div>
    }
    else
    {
        <div>
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Borrower</th>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Status</th>
                        <th>Date Requested</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in pendingRequests)
                    {
                    <tr>
                        <td>@request.BorrowerEmail</td>
                        <td>@request.BookTitle</td>
                        <td>@request.BookAuthor</td>
                        <td>@request.Status</td>
                        <td>@request.DateRequested.ToUKStandardDate()</td>
                        <td>
                            <button class="btn btn-success" 
                                @onclick="@(() => MarkAsSent(request.Id))">Mark as Sent
                            </button>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }

@code {
    private List<Request> pendingRequests;

    [CascadingParameter] 
    public IModalService Modal { get; set; }

    private bool ShowErrors;
    private string Error = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetPendingRequests();
            StateHasChanged();
        }
    }
    
    private async Task GetPendingRequests()
    {
        pendingRequests = await requestService.GetRequestsByStatusAsync(RequestStatus.Pending);
    }

    private async Task MarkAsSent(int requestId)
    {
        // first, get confirmation via a modal
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmModal.Message), "This will start the borrower's lending period");

        parameters.Add(nameof(ConfirmModal.ConfirmButtonText), "Yes, confirm");
        parameters.Add(nameof(ConfirmModal.CancelButtonText), "No, cancel");

        var confirmModal = Modal.Show<ConfirmModal>("Are you sure?", parameters);
        var result = await confirmModal.Result;

        // user confirmed, proceed with the update
        if (!result.Cancelled) // user must have clicked confirm button
        {
            var updateResponse = await requestService.UpdateRequestStatusAsync(requestId, RequestStatus.Sent);

            if (updateResponse.Successful)
            {
                ShowErrors = false;
                toastService.ShowSuccess("This book request has been marked as sent", "Book Sent");
                await GetPendingRequests();
            }
            else 
            {
                ShowErrors = true;
                Error = updateResponse.Error;
            }
        }
    }
}

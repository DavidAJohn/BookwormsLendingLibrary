@page "/authors/"

@using BookwormsUI.Components.Paging
@inject IAuthorRepository authorRepository
@inject AuthorService authorService
@inject NavigationManager navigationManager
@inject SettingsService settings

@if (authors == null)
{
    <LoadingMessage Message="Loading authors..." />
}
else
{
    <div>
        <BreadcrumbHeader CurrentUrl=@CurrentUrl />
    </div>

    <div class="container pt-3 no-lr-padding">
        <div class="row">
            <div class="col-md-2">
                <div class="mt-2 mb-5">
                    <p class="sidebar-heading">Sort By</p>
                    <div class="btn-group w-100">
                        <button class="px-3 btn btn-light btn-sm dropdown-toggle dropdown-button" type="button" data-toggle="dropdown">
                            @SortBySelected
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("nameAsc", "Surname (A-Z)")'>
                                    Author Surname (A-Z)
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("nameDesc", "Surname (Z-A)")'>
                                    Author Surname (Z-A)
                                </NavLink>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="pl-5 col-md-10">
                <div class="py-2">
                    <AutoSearch 
                        OnSearchChanged="SearchChanged" 
                        ClearSearch=@ClearSearch 
                        Placeholder="Search author name"
                    />
                </div>
                @if (authors.Count() < 1)
                {
                    <div class="pt-3 no-results">
                        <p>No authors found</p>
                    </div>
                    <div class="pt-3">
                        <Button Color="Color.Light" @onclick="async () => await ResetSearch()">
                            Clear search
                        </Button>
                    </div>
                }
                else
                {
                    <div class="container">
                            @foreach (var author in authors)
                            {
                            <div class="author-row">
                                <div >
                                    <NavLink href="@($"/authors/details/{author.Id}")">
                                        <img 
                                            src="@($"{(!String.IsNullOrEmpty(author.AuthorImageUrl) ? AssetBaseUrl + author.AuthorImageUrl : AssetBaseUrl + "/authors/author_image.png")}")" 
                                            class="author-image"
                                        />
                                    </NavLink>
                                </div>
                                <div >
                                    <div class="author-name">
                                        <NavLink href="@($"/authors/details/{author.Id}")">
                                            @author.FirstName @author.LastName
                                        </NavLink>
                                    </div>
                                    <div class="mt-4 author-biography">
                                        @if (author.Biography.Length > 250)
                                        {  
                                            var biogLength = author.Biography.Length;
                                            var biog = author.Biography.Substring(0, 248) + "...";
                                            @biog
                                        } else {
                                            @author.Biography
                                        }
                                    </div>
                                    <div class="mt-4">
                                        <NavLink href="@($"/authors/details/{author.Id}")">
                                            @if (author.Books.Count != 1) 
                                            {
                                                <span><strong>@author.Books.Count</strong> books available</span>
                                            } 
                                            else {
                                                <span><strong>@author.Books.Count</strong> book available</span>
                                            }
                                        </NavLink>
                                    </div>
                                </div>
                            </div>
                            }
                    </div>
                }
            </div>
        </div>
        
        @if (authors.Count() > 1)
        {
            <div class="row">
                <div class="col-md-12">
                    <div>
                        <Paging metadata="metadata" Spread="2" SelectedPage="SelectedPage" />
                    </div>
                </div>
            </div>
        }

    </div>
}


@code {
    private List<Author> authors;
    private string url;
    private PagingMetadata metadata;
    private ItemParameters itemParams = new ItemParameters();
    private string CurrentUrl;
    private bool ClearSearch = false;
    private string SortBySelected = "Surname (A-Z)";
    private string AssetBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage();

        // get current url from navigation manager to pass to breadcrumb component
        CurrentUrl = navigationManager.Uri;

        // get the base url for image assets
        AssetBaseUrl = settings.GetAssetBaseUrl();
    }

    private async Task SelectedPage(int page = 1)
    {
        itemParams.PageIndex = page;

        await GetData();
    }

    private async Task SearchChanged(string searchTerm = "")
    {
        itemParams.PageIndex = 1;
        itemParams.Search = searchTerm;
        
        await GetData();
    }

    private async Task GetData()
    {
        url = authorService.GetAuthorsApiEndpoint();
        var response = await authorRepository.GetAsync(url, itemParams);

        authors = response.Items;
        metadata = response.Metadata;
    }

    private async Task AddSort(string SortBy, string SortByName) 
    {
        itemParams.SortBy = SortBy;
        SortBySelected = SortByName;

        await GetData();
    }

    private async Task ResetSearch()
    {
        ClearSearch = true;
        await SearchChanged();
    }
}

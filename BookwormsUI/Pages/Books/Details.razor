@page "/books/details/{Id}"

@inject IBookRepository bookRepository
@inject BookService bookService
@inject NavigationManager navigationManager

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <h4>Error - the requested book could not be found</h4>
}
else if (book == null)
{
    <LoadingMessage Message="Loading book details..." />
}
else
{
    @if (CurrentUrl != null)
    {
        <div>
            <BreadcrumbHeader CurrentUrl=@CurrentUrl />
        </div>
    }
    
    <div class="container">
        <div class="row">
            <div class="col-3">
                <img 
                    src="@($"{(!String.IsNullOrEmpty(book.CoverImageUrl) && book.CoverImageUrl != "cover.jpg" ? book.CoverImageUrl : "images/BookCover.png")}")"  
                    style="width: 200px;max-height: 300px;"
                />
            </div>
            <div class="col-9">
                <table class="table table-responsive">
                    <tr>
                        <td>Title:</td>
                        <td>@book.Title</td>
                    </tr>
                    <tr>
                        <td>Published:</td>
                        <td>@book.YearPublished</td>
                    </tr>
                    <tr>
                        <td>Author:</td>
                        <td>
                            @if (book.Author == null)
                            {
                                <span class="text-muted">No author listed</span>
                            }
                            else
                            {
                                <a href="/authors/details/@book.AuthorId">@book.Author</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Summary:</td>
                        <td>@book.Summary</td>
                    </tr>
                </table>
                <br />
            </div>
        </div>
    </div>

    <div>
        <button class="btn btn-info" @onclick="BackToBooks">
            Back to List of Books
        </button>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Book book = new Book();
    private string CurrentUrl;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        var url = bookService.GetBooksApiEndpoint();
        book = await bookRepository.GetByIdAsync(url + "/", id);

        CurrentUrl = navigationManager.Uri;
    }

    private void BackToBooks()
    {
        navigationManager.NavigateTo("/books/");
    }
}

@page "/books/details/{Id}"

@inject IBookRepository bookRepository
@inject BookService bookService
@inject NavigationManager navigationManager

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <h4>Error - the requested book could not be found</h4>
}
else if (book == null)
{
    <LoadingMessage Message="Loading book details..." />
}
else
{
    @if (CurrentUrl != null)
    {
        <div>
            <BreadcrumbHeader CurrentUrl=@CurrentUrl />
        </div>
    }
    
    <div class="container">
        <div class="row">
            <div class="col-2">
                <img src="@book." style="width: 200px;" />
            </div>
            <div class="col-8">
                <h4>Book details</h4>
                <table class="table table-responsive">
                    <tr>
                        <td>Title:</td>
                        <td>@book.Title</td>
                    </tr>
                    <tr>
                        <td>Published:</td>
                        <td>@book.YearPublished</td>
                    </tr>
                    <tr>
                        <td>Author:</td>
                        <td>
                            @if (book.Author == null)
                            {
                                <span class="text-muted">No author listed</span>
                            }
                            else
                            {
                                <a href="/authors/details/@book.AuthorId">@book.Author</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Summary:</td>
                        <td>@book.Summary</td>
                    </tr>
                </table>
                <br />
            </div>
        </div>
    </div>

}

<button class="btn btn-secondary" @onclick="BackToBooks">
    <i class="fa fa-backward"></i>&nbsp;
    Back to List of Books
</button>

@code {
    [Parameter]
    public string Id { get; set; }

    private Book book = new Book();
    private string CurrentUrl;

    protected async override Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        var url = bookService.GetBooksApiEndpoint();
        book = await bookRepository.GetByIdAsync(url, id);

        CurrentUrl = navigationManager.Uri;
    }

    private void BackToBooks()
    {
        navigationManager.NavigateTo("/books/");
    }
}

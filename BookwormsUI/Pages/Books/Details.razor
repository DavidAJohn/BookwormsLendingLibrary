@page "/books/details/{Id}"

@inject IBookRepository bookRepository
@inject BookService bookService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToastService ToastService

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <h4>Error - the requested book could not be found</h4>
}
else if (book == null)
{
    <LoadingMessage Message="Loading book details..." />
}
else
{
    @if (CurrentUrl != null)
    {
        <div>
            <BreadcrumbHeader CurrentUrl=@CurrentUrl />
        </div>
    }
    
    <div class="container">
        <div class="mt-4 row">
            <div class="col-3">
                <img 
                    src="@($"{(!String.IsNullOrEmpty(book.CoverImageUrl) ? book.CoverImageUrl : "images/book_cover.png")}")"  
                    style="width: 250px;max-height: 375px;"
                />
            </div>
            <div class="col-9">
                <table class="table table-responsive">
                    <tr>
                        <td>Title:</td>
                        <td>@book.Title</td>
                    </tr>
                    <tr>
                        <td>Author:</td>
                        <td>
                            @if (book.Author == null)
                            {
                                <span class="text-muted">No author listed</span>
                            }
                            else
                            {
                                <a href="/authors/details/@book.AuthorId">@book.Author</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Published:</td>
                        <td>@book.YearPublished</td>
                    </tr>
                    <tr>
                        <td>Category:</td>
                        <td>@book.Category</td>
                    </tr>
                    <tr>
                        <td>Summary:</td>
                        <td>@book.Summary</td>
                    </tr>
                    <tr>
                        @if (LoggedIn)
                        {
                            <td colspan="2">
                                <button class="btn btn-success" @onclick="@(() => ShowConfirmAddress(book.Id))">
                                    Request This Book
                                </button>
                            </td>
                        }
                        else
                        {
                            <td colspan="2">
                                <strong>You must be logged in to request this book. Log in <a href="/login"><u>here</u></a>, or register <a href="/register"><u>here</u></a>.</strong>
                            </td>
                        }
                    </tr>
                    <tr>
                        <td colspan="2">
                            There is currently <strong>1</strong> copy of this book available to borrow
                        </td>
                    </tr>
                    @if (ShowErrors)
                    {
                        <tr>
                            <td colspan="2">
                                <div class="alert alert-danger" role="alert">
                                    <p>@Error</p>
                                </div>
                            </td>
                        </tr>
                    }
                </table>
                <br />
            </div>
        </div>

        <div class="mt-4">
            <button class="btn btn-info" @onclick="BackToBooks">
                Back to List of Books
            </button>
        </div>
    </div>

}

@code {
    [CascadingParameter] 
    public IModalService Modal { get; set; }

    [Parameter]
    public string Id { get; set; }

    private Book book = new Book();
    private string CurrentUrl;

    private bool ShowErrors;
    private string Error = "";
    private bool LoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        var url = bookService.GetBooksApiEndpoint();
        book = await bookRepository.GetByIdAsync(url + "/", id);

        CurrentUrl = navigationManager.Uri;

        await GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            LoggedIn = true;
        }
    }

    private void BackToBooks()
    {
        navigationManager.NavigateTo("/books/");
    }

    private async Task ShowConfirmAddress(int bookId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmAddress.BookId), bookId);
        parameters.Add(nameof(ConfirmAddress.Message), "This is where your book will be sent, so please make sure it is correct");

        var addressModal = Modal.Show<ConfirmAddress>("Please confirm your address", parameters);
        var result = await addressModal.Result;

        if (!result.Cancelled)
        {
            var requestResponse = (RequestResult)result.Data;

            if (requestResponse.Successful == false)
            {
                ShowErrors = true;
                Error = requestResponse.Error;
            }
            else 
            {
                ShowErrors = false;
                ToastService.ShowSuccess("Thanks, your book request will now be reviewed by our staff as soon as possible", "Request saved");
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}

@page "/books/"

@using BookwormsUI.Components.Paging
@inject IBookRepository bookRepository
@inject BookService bookService
@inject ICategoryRepository categoryRepository
@inject CategoryService categoryService
@inject NavigationManager navigationManager

@if (books == null)
{
    <LoadingMessage Message="Loading books..." />
}
else
{
    <div>
        <BreadcrumbHeader CurrentUrl=@CurrentUrl />
    </div>
    
    <div class="container pt-3">
        <div class="row">
            <div class="col-md-2">
                <div class="mb-5 mt-2">
                    <p class="sidebar-heading">Sort By</p>
                    <div class="btn-group w-100">
                        <button class="btn btn-light btn-sm dropdown-toggle px-3 dropdown-button" type="button" data-toggle="dropdown">
                            @SortBySelected
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("titleAsc", "Title")'>
                                    Title
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("authorAsc", "Author Name")'>
                                    Author Name
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("yearPublishedDesc", "Published (new to old)")'>
                                    Published (new to old)
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("yearPublishedAsc", "Published (old to new)")'>
                                    Published (old to new)
                                </NavLink>
                            </li>
                        </ul>
                    </div>
                </div>
                @if (categories != null) 
                {
                    <div class="sidebar-heading">
                        Category
                    </div>
                    <div class="w-100">
                        <ul class="list pt-3">
                            <li class="list-items">
                                <NavLink @onclick="async () => await CategorySearch(0)"><strong>All Categories</strong></NavLink>
                            </li>
                        @foreach (var category in categories)
                        {
                            <li class="list-items">
                                <NavLink @onclick="async () => await CategorySearch(category.Id)">@category.Name</NavLink>
                            </li>
                        }
                        </ul>
                    </div>
                }
            </div>
            <div class="col-md-10 pl-5">
                <div class="py-2">
                    <AutoSearch OnSearchChanged="SearchChanged" ClearSearch=@ClearSearch />
                </div>
                @if (books.Count() < 1)
                {
                    <div class="no-results pt-3">
                        <p>No books found for this search</p>
                    </div>
                    <div class="pt-3">
                        <Button Color="Color.Light" @onclick="async () => await ResetSearch()">
                            Clear search
                        </Button>
                    </div>
                }
                else
                {
                    <table class="table table-responsive">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Title</th>
                                <th>Author</th>
                                <th>Year</th>
                                <th>Category</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var book in books)
                            {
                            <tr>
                                <td>
                                    <a href="/books/details/@book.Id">
                                        <img 
                                            src="@($"{(!String.IsNullOrEmpty(book.CoverImageUrl) && book.CoverImageUrl != "cover.jpg" ? book.CoverImageUrl : "images/BookCover.png")}")" 
                                            style="width:75px; max-height: 125px;" 
                                        />
                                    </a>
                                </td>
                                <td>
                                    <a href="/books/details/@book.Id">
                                        @book.Title
                                    </a>
                                </td>
                                <td>@book.Author</td>
                                <td>@book.YearPublished</td>
                                <td>@book.Category</td>
                            </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
            
        @if (books.Count() > 1)
        {
            <div class="row">
                <div class="col-md-12">
                    <div>
                        <Paging metadata="metadata" Spread="2" SelectedPage="SelectedPage" />
                    </div>
                </div>
            </div>
        }

    </div>
}

@code {
    private List<Book> books;
    private List<Category> categories;
    private string url;
    private PagingMetadata metadata = new PagingMetadata();
    private ItemParameters itemParams = new ItemParameters();
    private string CurrentUrl;
    private bool ClearSearch = false;
    private string SortBySelected = "Title";

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage();
        await GetCategories();

        // pass current url to breadcrumb component
        CurrentUrl = navigationManager.Uri;
    }

    private async Task SelectedPage(int page = 1)
    {
        itemParams.PageIndex = page;

        await GetData();
    }

    private async Task SearchChanged(string searchTerm = "")
    {
        itemParams.PageIndex = 1;
        itemParams.Search = searchTerm;
        
        await GetData();
    }

    private async Task GetData()
    {
        url = bookService.GetBooksApiEndpoint();
        var response = await bookRepository.GetAsync(url, itemParams);

        books = response.Items;
        metadata = response.Metadata;
    }

    private async Task GetCategories() 
    {
        url = categoryService.GetCategoriesApiEndpoint();
        categories = await categoryRepository.GetListAsync(url);
    }

    private async Task CategorySearch(int categoryId = 0) 
    {
        itemParams.CategoryId = categoryId;

        await GetData();
    }

    private async Task AddSort(string SortBy, string SortByName) 
    {
        itemParams.SortBy = SortBy;
        SortBySelected = SortByName;

        await GetData();
    }

    private async Task ResetSearch()
    {
        ClearSearch = true;
        await SearchChanged();
    }
}

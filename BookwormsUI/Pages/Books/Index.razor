@page "/books/"
@page "/books/{sortBy}"
@page "/books/category/{categoryId:int}"

@using BookwormsUI.Components.Paging
@using BookwormsUI.Extensions

@inject IBookService bookService
@inject ICategoryService categoryService
@inject NavigationManager navigationManager
@inject SettingsService settings
@inject AuthenticationStateProvider authenticationStateProvider

@if (books == null)
{
    <LoadingMessage Message="Loading books..." />
}
else
{
    <div>
        <BreadcrumbHeader BreadcrumbElements=@BreadcrumbElements />
    </div>
    
    <div class="container pt-3">
        <div class="row">
            <div class="col-md-2">
                <div class="mt-2 mb-5">
                    <p class="sidebar-heading">Sort By</p>
                    <div class="btn-group w-100 dropdown">
                        <button class="px-3 btn btn-light btn-sm dropdown-toggle dropdown-button" type="button" data-bs-toggle="dropdown">
                            @SortBySelected
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("titleAsc", "Title")'>
                                    Title
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("authorAsc", "Author Name")'>
                                    Author Name
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("yearPublishedDesc", "Published (new to old)")'>
                                    Published (new to old)
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("yearPublishedAsc", "Published (old to new)")'>
                                    Published (old to new)
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("recentlyAddedDesc", "Recently Added")'>
                                    Recently Added
                                </NavLink>
                            </li>
                            <li class="dropdown-item">
                                <NavLink @onclick='async () => await AddSort("nostPopularDesc", "Most Popular")'>
                                    Most Popular
                                </NavLink>
                            </li>
                        </ul>
                    </div>
                </div>
                @if (categories != null) 
                {
                    <div class="sidebar-heading">
                        Category
                    </div>
                    <div class="w-100">
                        <ul class="pt-3 list">
                            <li class="list-items @(activeCategory == 0 ? "active" : "")">
                                <NavLink @onclick="async () => await CategorySearch(0)">All Categories</NavLink>
                            </li>
                        @foreach (var category in categories)
                        {
                            <li class="list-items @(activeCategory == category.Id ? "active" : "")">
                                <NavLink @onclick="async () => await CategorySearch(category.Id)">@category.Name</NavLink>
                            </li>
                        }
                        </ul>
                    </div>
                }
            </div>
            <div class="ps-5 col-md-10">
                <div class="py-2">
                    <AutoSearch 
                        OnSearchChanged="SearchChanged" 
                        ClearSearch=@ClearSearch 
                        Placeholder="Search book title"
                    />
                </div>
                @if (books.Count() < 1)
                {
                    <div class="pt-3 no-results">
                        <p>No books found for this search</p>
                    </div>
                    <div class="pt-3">
                        <Button Color="Color.Light" @onclick="async () => await ResetSearch()">
                            Clear search
                        </Button>
                    </div>
                }
                else
                {
                    <div>
                        @foreach (var book in books)
                        {
                        <div class="book-row">
                            <div class="book-row-item">
                                <a href="/books/details/@book.Id">
                                    <img 
                                        src="@($"{(!String.IsNullOrEmpty(book.CoverImageUrl) ? book.CoverImageUrl : AssetBaseUrl + "/books/book_cover.png")}")"
                                        class="book-image"
                                    />
                                </a>
                            </div>
                            <div class="book-row-item">
                                <div class="book-title">
                                    <a href="/books/details/@book.Id">
                                        @book.Title
                                    </a>
                                    @if (@Role == "Administrator") // show an edit button for the admin user
                                    {
                                        <button type="button" @onclick="() => EditBook(book.Id)" class="btn btn-sm btn-outline-secondary ms-3">
                                            <i class="fas fa-user-edit"></i>&nbsp;
                                            Edit Book
                                        </button>
                                    }
                                </div>
                                <div class="book-author">
                                    <a href="/authors/details/@book.AuthorId">
                                        by @book.Author
                                    </a>
                                </div>
                                <div class="book-summary">
                                    @if (book.Summary.Length > 250)
                                        {  
                                            var summaryLength = book.Summary.Length;
                                            var summary = book.Summary.Substring(0, 248) + "...";
                                            @summary
                                        } else {
                                            @book.Summary
                                        }
                                </div>
                            </div>
                        </div>
                        }
                    </div>
                }
            </div>
        </div>
            
        @if (books.Count() > 1)
        {
            <div class="row">
                <div class="col-md-12">
                    <div>
                        <Paging metadata="metadata" Spread="2" SelectedPage="SelectedPage" />
                    </div>
                </div>
            </div>
        }

    </div>
}

@code {
    [Parameter]
    public string SortBy { get; set; }

    [Parameter]
    public int CategoryId { get; set; }

    private List<Book> books;
    private List<Category> categories;
    private string url;
    private PagingMetadata metadata = new PagingMetadata();
    private ItemParameters itemParams = new ItemParameters();
    private string CurrentUrl;
    private List<string> BreadcrumbElements = new List<string>();
    private bool ClearSearch = false;
    private string SortBySelected = "Title";
    private string AssetBaseUrl;
    private string Role;
    private int activeCategory = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (CategoryId > 0)
        {
            DisplayCategory();
        }

        if (!string.IsNullOrEmpty(SortBy))
        {
            DisplaySorted();
        }

        await SelectedPage();
        await GetCategories();

        // pass current url to breadcrumb component
        CurrentUrl = navigationManager.Uri;

        // get base url for image assets
        AssetBaseUrl = settings.GetAssetBaseUrl();

        // get claims principal data to check for an admin user
        await GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Role = user.GetRoleFromPrincipal();
        }
    }

    private async Task SelectedPage(int page = 1)
    {
        itemParams.PageIndex = page;

        await GetData();
    }

    private async Task SearchChanged(string searchTerm = "")
    {
        itemParams.PageIndex = 1;
        itemParams.Search = searchTerm;
        
        await GetData();
    }

    private async Task GetData()
    {
        url = bookService.GetBooksApiEndpoint();
        var response = await bookService.GetAsync(url, itemParams);

        books = response.Items;
        metadata = response.Metadata;
    }

    private async Task GetCategories() 
    {
        url = categoryService.GetCategoriesApiEndpoint();
        categories = await categoryService.GetListAsync(url);
    }

    private async Task CategorySearch(int categoryId = 0) 
    {
        itemParams.CategoryId = categoryId;

        // also highlight the active category in the sidebar
        SetActiveCategory();

        await GetData();
    }

    private async Task AddSort(string SortBy, string SortByName) 
    {
        itemParams.SortBy = SortBy;
        SortBySelected = SortByName;

        await GetData();
    }

    private async Task ResetSearch()
    {
        ClearSearch = true;
        await SearchChanged();
    }

    private void EditBook(int id = 0)
    {
        navigationManager.NavigateTo("/admin/books/edit/" + id);
    }

    public void DisplayCategory()
    {
        itemParams.CategoryId = CategoryId;

        // also highlight the active category in the sidebar
        SetActiveCategory();
        
        // provide the BreadcrumbHeader component with specific elements to display,
        // because the URL will now have a querystring appended
        string[] elements = {"Books", "Category"};
        BreadcrumbElements.AddRange(elements);
    }

    private void DisplaySorted()
    {
        string sortByOption = SortBy;
        itemParams.SortBy = sortByOption;

        // show correct option on the 'sort by' dropdown
        var sortByName = sortByOption switch
        {  
            "titleAsc" => "Title",
            "authorAsc" => "Author Name",
            "yearPublishedDesc" => "Published (new to old)",
            "yearPublishedAsc" => "Published (old to new)",
            "recentlyAddedDesc" => "Recently Added",
            "mostPopularDesc" => "Most Popular",
            _ => "Title"
        };

        SortBySelected = sortByName;
        
        // provide the BreadcrumbHeader component with specific elements to display,
        // because the URL will now have a querystring appended
        if (BreadcrumbElements.Count == 0)
        {
            BreadcrumbElements.Add("Books");
        }
    }

    private void SetActiveCategory()
    {
        // highlight the active category in the sidebar
        activeCategory = itemParams.CategoryId;
    }

}

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using BookwormsUI.Extensions
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Bookworms Library</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fa fa-home" aria-hidden="true"></i> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="authors/">
                <i class="fa fa-users" aria-hidden="true"></i> Authors
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="books/">
                <i class="fa fa-book" aria-hidden="true"></i> Books
            </NavLink>
        </li>
        @if (@Role == "Borrower")
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="">
                    <i class="fas fa-user" aria-hidden="true"></i> Your Profile
                </NavLink>
            </li>
        }
        @if (@Role == "Administrator")
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="admin/">
                    <i class="fas fa-user-shield" aria-hidden="true"></i> Admin
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string Role;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetClaimsPrincipalData();
            StateHasChanged();
        }
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Role = user.GetRoleFromPrincipal();
        }

    }
}
